The ``7-base_geometry`` module
============================
sing ``BaseGeometry``
----------------------

This is an example text file in reStructuredText format.
First import ``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Now use it:

    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

No exception or output means the object has passed the tests.

Unintended use
~~~~~~~~~~~~~
No exceptions arise for an empty name string, although there is no practical reason to submit one:

    >>> bg.integer_validator("", 6)

as it would make the custom exception raised for bad values less useful:

    >>> bg.integer_validator("", "John")
    Traceback (most recent call last):
        ...
    TypeError:  must be an integer
his class should define 2 functions

``area``
    >>> 'area' in dir(BaseGeometry)
    True

``integer_validator``
    >>> 'integer_validator' in dir(BaseGeometry)
    True

Should test publicity of methods ?

And no instance attributes or methods
    >>> dir(bg) == dir(BaseGeometry)
    True

Test ``area``
-------------
It is not implemented
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Test ``integer_validator``
--------------------------
Integer takes in 2 arguments

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator(1)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator(1, 2, 3)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given


Test for type
     >>> def test_i(tests=[]):
     ...     for test in tests:
     ...         try:
     ...	     bg.integer_validator("name", test)
     ...       	 except Exception as e:
     ...      	     print("[{}] {} for type {}".format(e.__class__.__name__, e, type(test)))

     >>> tests = [True, 1.24, -76.87, set(), [1, 2], "a string", {"a":1}, ("11", 3), test_i, bg, BaseGeometry, None]
     >>> test_i(tests)
     [TypeError] name must be an integer for type <class 'bool'>
     [TypeError] name must be an integer for type <class 'float'>
     [TypeError] name must be an integer for type <class 'float'>
     [TypeError] name must be an integer for type <class 'set'>
     [TypeError] name must be an integer for type <class 'list'>
     [TypeError] name must be an integer for type <class 'str'>
     [TypeError] name must be an integer for type <class 'dict'>
     [TypeError] name must be an integer for type <class 'tuple'>
     [TypeError] name must be an integer for type <class 'function'>
     [TypeError] name must be an integer for type <class '7-base_geometry.BaseGeometry'>
     [TypeError] name must be an integer for type <class 'type'>
     [TypeError] name must be an integer for type <class 'NoneType'>

Test for sign
     >>> bg.integer_validator("name", -23)
     Traceback (most recent call last):
     ValueError: name must be greater than 0

     >>> bg.integer_validator("name", 0)
     Traceback (most recent call last):
     ValueError: name must be greater than 0

When it works it does not return anything
     >>> bg.integer_validator("name", 3)

